/***
 * TESTING U8G2Lib
 * @hpsaturn 
 ***/

#include <Arduino.h>
#include <U8g2lib.h>
#include <GUIUtils.hpp>

unsigned int tcount = 0;

#define bitmap_name_height 8
#define bitmap_name_width 8

static const unsigned char PROGMEM test_margin[] = {
 B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
 B01111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111110,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010,
 B01111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111110,
 B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000
};

static const unsigned char PROGMEM test_margin_64x48_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x7f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xfe, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

static const unsigned char PROGMEM ic_bluetooth_on[] = {
 B00000000,
 B00011100,
 B01010110,
 B00111100,
 B00111000,
 B00111100,
 B01010110,
 B00011100,
};

static const unsigned char PROGMEM ic_bluetooth_off[] = {
 B00000000,
 B00011100,
 B01010110,
 B00111100,
 B10111001,
 B00111100,
 B01010110,
 B00011100,
};

static const unsigned char PROGMEM ic_wifi_on[] = {
 B00000000,
 B00011000,
 B00111100,
 B01000010,
 B10011001,
 B00100100,
 B01000010,
 B00011000,
};

static const unsigned char PROGMEM ic_data_1[] = {
 B00000000,
 B00111000,
 B01101100,
 B11000110,
 B00000000,
 B11000110,
 B01101100,
 B00111000,
};

static const unsigned char PROGMEM ic_data_2[] = {
 B00100100,
 B01110100,
 B01110100,
 B00100100,
 B00100100,
 B00101110,
 B00101110,
 B00100100,
};

static const unsigned char PROGMEM ic_data_3[] = {
 B00000000,
 B01100110,
 B11110110,
 B01100110,
 B01100110,
 B01101111,
 B01100110,
 B00000000,
};

bool toggle;


#ifdef WEMOSOLED // display via i2c for WeMOS OLED board
    U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, 4, 5, U8X8_PIN_NONE);
#elif HELTEC // display via i2c for Heltec board
    U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, 15, 4, 16);
#else        // display via i2c for D1MINI board
    U8G2_SSD1306_64X48_ER_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE, U8X8_PIN_NONE, U8X8_PIN_NONE);
#endif


GUIUtils gui;

void setup(void) {
  Serial.begin(115200);
  Serial.println("\n== INIT SETUP ==\n");
  Serial.println("-->[SETUP] console ready");
  gui.displayInit(u8g2);
  gui.showWelcome();
  delay(1000);
}

void loop(void) {
  gui.pageStart();
  gui.displaySensorAvarage(320); // it was calculated on bleLoop()
  gui.displaySensorData(120, 230);
  gui.displaySensorError();

  if (tcount++ % 100 == 0) toggle = !toggle;
  if (toggle)
    u8g2.drawBitmap(54, 40, 1, 8, ic_bluetooth_on);
  else
    u8g2.drawBitmap(54, 40, 1, 8, ic_bluetooth_off);
  u8g2.drawBitmap(44, 40, 1, 8, ic_wifi_on);
  // u8g2.drawBitmap(20,40,1,8,ic_data_1);
  // u8g2.drawBitmap(30,40,1,8,ic_data_2);
  u8g2.drawBitmap(34, 40, 1, 8, ic_data_3);
  //u8g2.drawBitmap(0,0,8,48,test_margin);
  // u8g2.drawBitmap(0,0,8,48,test_margin_64x48_bits);
  gui.pageEnd();
  delay(10);
}

